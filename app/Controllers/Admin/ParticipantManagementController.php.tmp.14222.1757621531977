<?php

namespace App\Controllers\Admin;

use App\Controllers\BaseController;
use App\Models\Participant;
use App\Models\Team;
use App\Models\School;

class ParticipantManagementController extends BaseController
{
    public function __construct()
    {
        parent::__construct();
    }

    public function index()
    {
        try {
            error_log('ParticipantController: Starting index method');
            
            $searchTerm = $this->input('search', '');
            $schoolId = $this->input('school_id', '');
            $teamId = $this->input('team_id', '');
            $status = $this->input('status', '');
            
            error_log('ParticipantController: Got input parameters');
            
            $page = max(1, (int)$this->input('page', 1));
            $perPage = 25;
            $offset = ($page - 1) * $perPage;

            $whereConditions = ['p.id IS NOT NULL'];
            $params = [];

            if (!empty($searchTerm)) {
                $whereConditions[] = "(p.first_name LIKE ? OR p.last_name LIKE ? OR p.id_number LIKE ?)";
                $searchParam = '%' . $searchTerm . '%';
                $params[] = $searchParam;
                $params[] = $searchParam;
                $params[] = $searchParam;
            }

            if (!empty($schoolId)) {
                $whereConditions[] = "s.id = ?";
                $params[] = $schoolId;
            }

            if (!empty($teamId)) {
                $whereConditions[] = "t.id = ?";
                $params[] = $teamId;
            }

            if (!empty($status)) {
                $whereConditions[] = "p.status = ?";
                $params[] = $status;
            }

            $whereClause = implode(' AND ', $whereConditions);
            error_log('ParticipantController: Built where clause: ' . $whereClause);

            // Get total count for pagination
            error_log('ParticipantController: Fetching total count');
            $totalQuery = "
                SELECT COUNT(DISTINCT p.id) as total
                FROM participants p
                LEFT JOIN teams t ON p.team_id = t.id
                LEFT JOIN schools s ON t.school_id = s.id
                WHERE {$whereClause}
            ";
            
            $totalResult = $this->db->query($totalQuery, $params);
            $total = $totalResult[0]['total'] ?? 0;
            $totalPages = ceil($total / $perPage);
            error_log('ParticipantController: Total participants found: ' . $total);

            // Get participants with related data
            error_log('ParticipantController: Fetching participants list');
            $participants = $this->db->query("
                SELECT p.*, t.name as team_name, s.name as school_name, s.district,
                       CASE 
                           WHEN p.date_of_birth IS NOT NULL THEN 
                               TIMESTAMPDIFF(YEAR, p.date_of_birth, CURDATE())
                           ELSE NULL 
                       END as age,
                       p.created_at, p.updated_at
                FROM participants p
                LEFT JOIN teams t ON p.team_id = t.id
                LEFT JOIN schools s ON t.school_id = s.id
                WHERE {$whereClause}
                ORDER BY p.created_at DESC
                LIMIT {$perPage} OFFSET {$offset}
            ", $params);
            error_log('ParticipantController: Found ' . count($participants) . ' participants');

            // Get filter options
            error_log('ParticipantController: Fetching filter options - schools');
            $schools = $this->db->query("
                SELECT DISTINCT s.id, s.school_name 
                FROM schools s 
                INNER JOIN teams t ON s.id = t.school_id 
                INNER JOIN participants p ON t.id = p.team_id 
                ORDER BY s.school_name
            ");

            error_log('ParticipantController: Fetching filter options - teams');
            $teams = $this->db->query("
                SELECT DISTINCT t.id, t.name as team_name, s.school_name
                FROM teams t 
                INNER JOIN participants p ON t.id = p.team_id 
                INNER JOIN schools s ON t.school_id = s.id
                ORDER BY s.school_name, t.name
            ");

            error_log('ParticipantController: Getting statistics');
            $statistics = $this->getParticipantStatistics();
            
            error_log('ParticipantController: Building data array');
            $data = [
                'participants' => $participants,
                'schools' => $schools,
                'teams' => $teams,
                'filters' => [
                    'search' => $searchTerm,
                    'school_id' => $schoolId,
                    'team_id' => $teamId,
                    'status' => $status
                ],
                'pagination' => [
                    'current_page' => $page,
                    'total_pages' => $totalPages,
                    'total_records' => $total,
                    'per_page' => $perPage
                ],
                'statistics' => $statistics,
                'title' => 'Participant Management',
                'pageTitle' => 'Participant Management',
                'pageSubtitle' => 'Manage competition participants and registrations'
            ];

            error_log('ParticipantController: Rendering view');
            return $this->view('admin/participants/index', $data);
            
        } catch (\Exception $e) {
            error_log('Error in ParticipantManagementController@index: ' . $e->getMessage());
            error_log('Stack trace: ' . $e->getTraceAsString());
            return $this->errorResponse('Unable to load participant management dashboard', 500);
        }
    }

    public function show($id)
    {
        $participant = $this->db->query("
            SELECT p.*, t.name as team_name, t.id as team_id, s.school_name, s.id as school_id,
                   CASE 
                       WHEN p.date_of_birth IS NOT NULL THEN 
                           TIMESTAMPDIFF(YEAR, p.date_of_birth, CURDATE())
                       ELSE NULL 
                   END as age,
                   u.first_name as coach_first_name, u.last_name as coach_last_name, u.email as coach_email
            FROM participants p
            LEFT JOIN teams t ON p.team_id = t.id
            LEFT JOIN schools s ON t.school_id = s.id
            LEFT JOIN users u ON t.coach_id = u.id
            WHERE p.id = ?
        ", [$id]);

        if (empty($participant)) {
            $this->flash('error', 'Participant not found.');
            return $this->redirect('/admin/participants');
        }

        $participant = $participant[0];

        // Get participant's scores and performance data
        $scores = $this->db->query("
            SELECT s.*, c.name as competition_name, cat.category_name,
                   tm.match_name, tm.scheduled_time
            FROM scores s
            INNER JOIN competitions c ON s.competition_id = c.id
            LEFT JOIN categories cat ON s.category_id = cat.id
            LEFT JOIN tournament_matches tm ON s.match_id = tm.id
            WHERE s.participant_id = ?
            ORDER BY s.created_at DESC
        ", [$id]);

        $data = [
            'participant' => $participant,
            'scores' => $scores,
            'activity_log' => $this->getParticipantActivityLog($id)
        ];

        return $this->view('admin/participants/show', $data);
    }

    public function edit($id)
    {
        $participant = $this->db->query("
            SELECT p.*, t.id as team_id, t.name as team_name, s.id as school_id, s.school_name
            FROM participants p
            LEFT JOIN teams t ON p.team_id = t.id
            LEFT JOIN schools s ON t.school_id = s.id
            WHERE p.id = ?
        ", [$id]);

        if (empty($participant)) {
            $this->flash('error', 'Participant not found.');
            return $this->redirect('/admin/participants');
        }

        $participant = $participant[0];

        // Get available teams for reassignment
        $teams = $this->db->query("
            SELECT t.id, t.name as team_name, s.school_name,
                   COUNT(p.id) as current_participants,
                   t.team_size as max_participants
            FROM teams t
            INNER JOIN schools s ON t.school_id = s.id
            LEFT JOIN participants p ON t.id = p.team_id
            GROUP BY t.id
            ORDER BY s.school_name, t.name
        ");

        $data = [
            'participant' => $participant,
            'teams' => $teams
        ];

        return $this->view('admin/participants/edit', $data);
    }

    public function update($id)
    {
        if ($_SERVER['REQUEST_METHOD'] !== 'PUT' && $_SERVER['REQUEST_METHOD'] !== 'POST') {
            return $this->redirect('/admin/participants/' . $id . '/edit');
        }

        try {
            $data = $this->input();
            
            // Validate required fields
            $required = ['first_name', 'last_name', 'date_of_birth', 'grade'];
            foreach ($required as $field) {
                if (empty($data[$field])) {
                    throw new \Exception("Field '{$field}' is required.");
                }
            }

            // Validate date of birth
            if (!strtotime($data['date_of_birth'])) {
                throw new \Exception('Invalid date of birth format.');
            }

            // Check if participant exists
            $participant = $this->db->query("SELECT * FROM participants WHERE id = ?", [$id]);
            if (empty($participant)) {
                throw new \Exception('Participant not found.');
            }

            // Update participant
            $this->db->query("
                UPDATE participants 
                SET first_name = ?, last_name = ?, date_of_birth = ?, grade = ?, 
                    gender = ?, id_number = ?, contact_number = ?, email = ?,
                    team_id = ?, status = ?, special_requirements = ?, notes = ?,
                    updated_at = NOW()
                WHERE id = ?
            ", [
                $data['first_name'],
                $data['last_name'],
                $data['date_of_birth'],
                $data['grade'],
                $data['gender'] ?? null,
                $data['id_number'] ?? null,
                $data['contact_number'] ?? null,
                $data['email'] ?? null,
                $data['team_id'] ?? null,
                $data['status'] ?? 'active',
                $data['special_requirements'] ?? null,
                $data['notes'] ?? null,
                $id
            ]);

            $this->flash('success', 'Participant updated successfully.');
            return $this->redirect('/admin/participants/' . $id);

        } catch (\Exception $e) {
            $this->flash('error', $e->getMessage());
            return $this->redirect('/admin/participants/' . $id . '/edit');
        }
    }

    public function destroy($id)
    {
        if ($_SERVER['REQUEST_METHOD'] !== 'DELETE' && $_SERVER['REQUEST_METHOD'] !== 'POST') {
            return $this->json(['success' => false, 'message' => 'Invalid request method'], 405);
        }

        try {
            // Check if participant exists
            $participant = $this->db->query("SELECT * FROM participants WHERE id = ?", [$id]);
            if (empty($participant)) {
                throw new \Exception('Participant not found.');
            }

            // Check for related records that would prevent deletion
            $scores = $this->db->query("SELECT COUNT(*) as count FROM scores WHERE participant_id = ?", [$id]);
            if ($scores[0]['count'] > 0) {
                throw new \Exception('Cannot delete participant with existing scores. Consider deactivating instead.');
            }

            // Soft delete by updating status
            $this->db->query("
                UPDATE participants 
                SET status = 'deleted', updated_at = NOW() 
                WHERE id = ?
            ", [$id]);

            if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest') {
                return $this->json([
                    'success' => true,
                    'message' => 'Participant deleted successfully.'
                ]);
            }

            $this->flash('success', 'Participant deleted successfully.');
            return $this->redirect('/admin/participants');

        } catch (\Exception $e) {
            if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest') {
                return $this->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 400);
            }

            $this->flash('error', $e->getMessage());
            return $this->redirect('/admin/participants');
        }
    }

    private function getParticipantStatistics()
    {
        $stats = [];

        try {
            // Total participants
            error_log("ParticipantStats: Fetching total participants");
            $total = $this->db->query("SELECT COUNT(*) as count FROM participants WHERE status != 'deleted'");
            $stats['total'] = $total[0]['count'] ?? 0;
            error_log("ParticipantStats: Total participants = " . $stats['total']);

            // Active participants
            error_log("ParticipantStats: Fetching active participants");
            $active = $this->db->query("SELECT COUNT(*) as count FROM participants WHERE status = 'active'");
            $stats['active'] = $active[0]['count'] ?? 0;
            error_log("ParticipantStats: Active participants = " . $stats['active']);

            // Participants by grade
            error_log("ParticipantStats: Fetching participants by grade");
            $byGrade = $this->db->query("
                SELECT grade, COUNT(*) as count 
                FROM participants 
                WHERE status != 'deleted' AND grade IS NOT NULL
                GROUP BY grade 
                ORDER BY grade
            ");
            $stats['by_grade'] = $byGrade;
            error_log("ParticipantStats: Grade groups = " . count($byGrade));

            // Participants by gender
            error_log("ParticipantStats: Fetching participants by gender");
            $byGender = $this->db->query("
                SELECT gender, COUNT(*) as count 
                FROM participants 
                WHERE status != 'deleted' AND gender IS NOT NULL
                GROUP BY gender
            ");
            $stats['by_gender'] = $byGender;
            error_log("ParticipantStats: Gender groups = " . count($byGender));

            // Recent registrations (last 30 days)
            error_log("ParticipantStats: Fetching recent registrations");
            $recent = $this->db->query("
                SELECT COUNT(*) as count 
                FROM participants 
                WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
                AND status != 'deleted'
            ");
            $stats['recent'] = $recent[0]['count'] ?? 0;
            error_log("ParticipantStats: Recent registrations = " . $stats['recent']);

            error_log("ParticipantStats: Successfully completed all queries");
            return $stats;

        } catch (\Exception $e) {
            error_log("ParticipantStats ERROR: " . $e->getMessage());
            error_log("ParticipantStats ERROR Stack: " . $e->getTraceAsString());
            
            // Return default stats to prevent view errors
            return [
                'total' => 0,
                'active' => 0,
                'by_grade' => [],
                'by_gender' => [],
                'recent' => 0
            ];
        }
    }

    private function getParticipantActivityLog($participantId)
    {
        // This would get activity logs if implemented
        // For now, return basic creation/update info
        return $this->db->query("
            SELECT 'participant_created' as action, created_at as timestamp, 'System' as actor
            FROM participants 
            WHERE id = ?
            UNION ALL
            SELECT 'participant_updated' as action, updated_at as timestamp, 'System' as actor
            FROM participants 
            WHERE id = ? AND updated_at != created_at
            ORDER BY timestamp DESC
            LIMIT 10
        ", [$participantId, $participantId]);
    }
}